#!/usr/bin/env php
<?php

declare(strict_types=1);

use Composer\InstalledVersions;
use Machinateur\TwigBlockValidator\Command\TwigBlockValidateCommand;
use Machinateur\TwigBlockValidator\TwigBlockValidatorBundle;
use Machinateur\TwigBlockValidator\TwigBlockValidatorKernel;
use Symfony\Bundle\FrameworkBundle\Console\Application;
use Symfony\Component\Console\Input\ArgvInput;

$envFile = __DIR__ . '/../.env';

if (!file_exists(__DIR__ . '/../.env') && !file_exists(__DIR__ . '/../.env.dist') && !file_exists(__DIR__ . '/../.env.local.php')) {
    $_SERVER['APP_RUNTIME_OPTIONS']['disable_dotenv'] = true;
}

require_once __DIR__ . '/../vendor/autoload_runtime.php';

return static function (array & $context) {
    \set_time_limit(0);

    if (!\class_exists(Application::class)) {
        throw new RuntimeException('You need to add "symfony/framework-bundle" as a Composer dependency.');
    }

    $input = new ArgvInput();
    $env   = $input->getParameterOption(['--env', '-e'], $context['APP_ENV'] ?? 'prod', true);
    $debug = ($context['APP_DEBUG'] ?? ($env !== 'prod')) && !$input->hasParameterOption('--no-debug', true);

    $kernel      = new TwigBlockValidatorKernel($env, $debug);
    $application = new Application($kernel);
    $application->setVersion(TwigBlockValidatorBundle::VERSION);

    $kernel->boot();

    // Note: This causes an error when calling with `-t @Namespaced:path/to/the/templates`, as it mistakes the `:` for a command namespace.
    $application->setDefaultCommand($defaultName = TwigBlockValidateCommand::getDefaultName());

    if (null !== $version = InstalledVersions::getVersion('shopware/storefront')) {
        $application->setName('Twig Block Version Validator');
        //$application->setVersion($version);

        $application->get($defaultName)
            ->getDefinition()
            ->getOption('use-version')
            ->setDefault($version);
    } else {
        $application->setName('Twig Block Validator');
    }

    return $application->run();
};
