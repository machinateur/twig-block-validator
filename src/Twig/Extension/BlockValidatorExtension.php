<?php
/*
 * MIT License
 *
 * Copyright (c) 2025 machinateur
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

declare(strict_types=1);

namespace Machinateur\TwigBlockValidator\Twig\Extension;

use Machinateur\TwigBlockValidator\Twig\BlockStackParser;
use Machinateur\TwigBlockValidator\Twig\NodeVisitor\BlockNodeVisitor;
use Twig\Environment;
use Twig\Extension\AbstractExtension;

/**
 * A native PHP implementation for inspecting twig block hashes,
 *  as similarly generated by the Shopware 6 PhpStorm plugin.
 *
 * The comments can be used inside twig-blocks of templates that extend others, and look as follows:
 *
 * ```
 * {# twig-block: <parent-block-hash>@<sw-version> #}
 * {% block some_core_block %}
 *   ...
 * {% endblock %}
 * ```
 *
 * See their [GitHub repository](https://github.com/shopwareLabs/shopware6-phpstorm-plugin),
 *  it's great for working on large twig code bases!
 *
 * This extension depends on `machinateur/twig-comment-lexer` for processing twig comments.
 *  So make sure to also install the lexer correctly for the environment.
 *
 * @see BlockNodeVisitor
 */
class BlockValidatorExtension extends AbstractExtension
{
    public const ALGO    = 'sha256';

    /**
     * @see https://regex101.com/r/5JINe6/1
     */
    public const PATTERN = /** @lang PhpRegExp */
        '{^\s*%s-block:\s*([a-z0-9]{64})(?:@(v?\d+\.\d+\.\d+(?:.\d+)?))?\s*$}sx';

    /**
     * @var 'twig'|'shopware'
     */
    public static string $preferredLabel = 'twig';

    /**
     * Install the parser for the given environment.
     */
    public static function setParser(Environment $environment): void
    {
        $environment->setParser(
            new BlockStackParser($environment)
        );
    }

    /**
     * Match the given comment against the defined comment-pattern for `twig-block` (or `shopware-block`) comments.
     *
     * @return array<array{0:string,1:int}>
     *
     * @throws \InvalidArgumentException    when the pattern does not match.
     */
    public static function matchComment(string $comment): array
    {
        // Try `twig-block` and `shopware-block` (for compatibility).
        foreach (['twig', 'shopware'] as $prefix) {
            // Match the sha-256 value and the version (optional), based on comment structure.
            $pattern = \sprintf(self::PATTERN, \preg_quote($prefix, '#'));

            if (1 === \preg_match($pattern, $comment, $match, \PREG_UNMATCHED_AS_NULL)) {
                return $match;
            }
        }

        throw new \InvalidArgumentException('Comment does not match required pattern.');
    }

    /**
     * Format a comment using the provided hash and version.
     */
    public static function formatComment(string $sourceHash, ?string $sourceVersion): string
    {
        if (null !== $sourceVersion) {
            $sourceHash .= '@' . $sourceVersion;
        }
        return \sprintf(' %s-block: %s ', self::$preferredLabel, $sourceHash);
    }

    /**
     * Encode the given data as `sha256` hash.
     */
    public static function hash(string $data): string
    {
        return \hash(self::ALGO, $data);
    }

    /**
     * Encode the given file as `sha256` hash.
     */
    public static function hashFile(string $file): string
    {
        return \hash_file(self::ALGO, $file);
    }

    public function getNodeVisitors(): array
    {
        // TODO: Remove or keep. This extension should be used and added to the environment internally. But the visitor cannot be retrieved at the moment.
        return [
            new BlockNodeVisitor(),
        ];
    }
}
